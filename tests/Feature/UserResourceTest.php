<?php

namespace Tests\Feature;

use App\Models\User;
use App\Services\User\UserService;
use App\Services\User\UserServiceImplement;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class UserResourceTest extends TestCase
{
    private UserService $userService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userService = $this->app->make(UserService::class);
    }

    /**
     * A basic feature test example.
     */
    public function test_success_get_all_users(): void
    {
        $response = $this->get('/users');

        $response->assertStatus(200);
    }

    public function test_success_create_user(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)
                        ->get('/users/create');

        $response->assertStatus(200);
    }

    public function test_success_store_user_as_teacher(): void
    {
        // create super admin and acting as super admin
        $user = User::factory()->create();

        $user->assignRole('super admin');

        $id = fake()->uuid;

        $response = $this->actingAs($user)
                        ->post('/users', [
                            'id' => $id,
                            'name' => 'guru 1',
                            'email' => 'guru1@gmail.com',
                            'password' => 'password'
                        ]);

        $response->assertStatus(200);

        $user = $this->userService->find('1');

        self::assertNotNull($user);
    }

    public function test_success_edit_user(): void
    {
        $response = $this->get('/users/1/edit');

        $response->assertStatus(200);
    }

    public function test_success_update_user(): void
    {
        $response = $this->put('/users/1');

        $response->assertStatus(200);
    }

    public function test_success_delete_user(): void
    {
        $response = $this->delete('/users/1');

        $response->assertStatus(200);
    }
}
